{"version":2,"kind":"Notebook","sha256":"f2bc7d2ff2ac5b608d231807a9d663d1188a9e271ec9c1a8033f024ed03bfb90","slug":"notebooks.random-forest","location":"/notebooks/random_forest.ipynb","dependencies":[],"frontmatter":{"title":"Random Forest Regression","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Jacob Tindan","given":"Jacob","family":"Tindan"},"name":"Jacob Tindan","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Pooja Hari Ambrish","given":"Pooja Hari","family":"Ambrish"},"name":"Pooja Hari Ambrish","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Altug Karakurt","given":"Altug","family":"Karakurt"},"name":"Altug Karakurt","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Ali Fallah","given":"Ali","family":"Fallah"},"name":"Ali Fallah","id":"contributors-myst-generated-uid-3"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/dust-cookbook","copyright":"2024","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/dust-cookbook/blob/HEAD/notebooks/random_forest.ipynb","exports":[{"format":"ipynb","filename":"random_forest.ipynb","url":"/dust-cookbook/_preview/27/build/random_forest-d3ebd4448604a538cbc59773fede58ca.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this exercise, we are using machine learning as a tool for data exploration. We are interested in discovering the impact of the other features (attributes) on PM10 dust concentration. One way to investigate this is to implement a PM10 predictor that uses the other features as input and then check the contribution of each attribute to the learning algorithm. Our algorithm of chocie is ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nv1ZqruO1U"},{"type":"link","url":"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"random forests","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tiYHDCiaYp"}],"urlSource":"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html","key":"TFHINSNJ0y"},{"type":"text","value":" due to the interpretability of the outcome.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Wz1JyF6hLh"}],"key":"MHzEEKkRDJ"}],"key":"knPcEF6E16"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Random forest","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z7DRQoqY90"}],"key":"GvaKZWEHE9"},{"type":"text","value":" is an ensemble algorithm, a class of learning algorithms that rely on combining the predictions of many ‘weak’ learners instead of relying on a single ‘strong’ learner. In practice, this approach is used to avoid the common issue of overfitting, where a learning algorithm fits the given dataset too well. In short, an overfit algorithm goes beyond just learning the nature and statistical properties data, it learns the particular intricacies of the specific examples in the dataset. Hence, it deviates from learning the trends in the data and learning the irrelevant noise in it. In other words, an overfit algorithm loses sight of the forest for the trees. The aptly named random forest algorithm instead uses an ensemble of learners, called decision trees, that are trained to lean towards under-fitting rather than over-fitting and uses the consensus of these weak learners to come to a final decision.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"X9lbNqKSo7"}],"key":"Lv30nCocLs"}],"key":"gUaQ1l25nz"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wC4HVYwZAG"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"decision trees","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xYqujTITcd"}],"key":"F9Se58RrVu"},{"type":"text","value":" that make up the random forest abstract the idea of a flowchart, mimicking a natural way humans make decisions. The training of a decision tree starts at the root node and at every step asks the question, “What is the most distinctive feature and how does it distinguish the target variable?”. Based on the answer, the tree branches and keeps iteratively asking the same question at each branch for the subset of data that lands on the given side. Thinking back to out primary goal with this cookbook, the decision trees are internally asking the same questions that we do.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qVVwlcwrVx"}],"key":"nGUQMel93U"}],"key":"ULEKGX6GlI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sklearn\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor ","key":"FLHNADD23Z"},{"type":"output","id":"dRjjVEjbJFxycwDQcx-SC","data":[],"key":"FFbDog2ku4"}],"key":"fGRya2TC0P"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# We are loading the edited version of the dataset we saved in the first section.\ndust_df = pd.read_csv('../saharan_dust_met_cat_vars.csv', index_col='time')\n\n# Similar to the PCA example, we need to one-hot encode the wind direction since random forests only support numerical features.\none_hot = pd.get_dummies(dust_df['WIND_DIR'])\ndust_df = dust_df.drop('WIND_DIR', axis=1)\ndust_df = dust_df.join(one_hot)\n\n# Separating our data into the target variable (PM10) and the features (the rest fo the attributes)\ny = dust_df['PM10'].values\nX = dust_df.drop(['PM10'], axis=1).values","key":"mGUehjK4KT"},{"type":"output","id":"_H09p6G3NLCpCO23cijWH","data":[],"key":"DrRwysjXdL"}],"key":"sTeAcDekg3"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A key step in training learning algorithms is the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q087sOyoBZ"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"hyperparameter tuning","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bP2NYqSzTp"}],"key":"qL1OoHAbi0"},{"type":"text","value":" step. These parameters specify the predictor we are using and can be used as levers to fine tune how well the algorithm fits the given dataset. These chocies are critical in preventing under-fitting and over-fitting in most learning algorithms. However, due to our choice of a resilient ensemble algorithm, these choices end up being less impactful than other algorithms like neural networks or a stand-alone decision-tree. We include the best performing choices of the parameters in our attempts, but feel free to change these values to see how they imapct the rest of our analysis.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xKuDbNAHaD"}],"key":"Hnl77mCMyZ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Below is a quick summary of how the most significant hyper-parameters impact the resultant random forest. For much more detail, you can find the in-depth ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fe8CGtjP1T"},{"type":"link","url":"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"user guide","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qpuTf4Rmmh"}],"urlSource":"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html","key":"cdyqUSsDmh"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hxWBlgjJTZ"}],"key":"K5UicwvL8L"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"inlineCode","value":"n_estimators","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"qP6mGoOLEp"},{"type":"text","value":": This is the number of decision-trees included in the random forest. The larger the number, the more robust we expect the algorithm to get to overfitting, which comes at a computational cost during training.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"MOQDfOowk4"}],"key":"yYXtCvGFhu"}],"key":"ja2D1icl08"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"inlineCode","value":"max_depth","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"iDHbb4Jn6v"},{"type":"text","value":": The maximum depth for the decision-trees in the algorithm. The deeper the tree gets, the more likely it is to over-fit (and conversely, the shallower the tree, the more likely it is to under-fit). Using an ensemble of trees instead of a single one reduces the impact of this hyper-parameter.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"PGEDOQGMlb"}],"key":"mKeyFrJQMe"}],"key":"IBOhF2Xlxc"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"inlineCode","value":"max_features","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"PAYRhKTT8t"},{"type":"text","value":": The number of features each branch can make decisions on. The larger the number, the likelier a tree is to over-fit and vice versa. Similar to ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"WDH796Zb1U"},{"type":"inlineCode","value":"max_depth","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"iDxCVATAfQ"},{"type":"text","value":", using random forest makes it less crucial to tune this parameter well. We leave it at its default value.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"zme5PflXHo"}],"key":"VNCeZHJ9Rf"}],"key":"huAvAYw97R"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"inlineCode","value":"n_jobs","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"omi4gPkyJB"},{"type":"text","value":": Enables training decision-trees in parallel. Our choices maximizes the parallelisim to complete training as fast as possible.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"mtm3llSFWi"}],"key":"b5EIaILnp9"}],"key":"NW1HIm9BDQ"}],"key":"iAt4lkhAP0"}],"key":"rrwScXRGXf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"rf = RandomForestRegressor(n_estimators=100, max_depth=100, n_jobs=-1)\n\n# This step might take a few minutes. We slice the data into 5 random chunks.\n# Then, each chunk is spared for testing, the training is done on the other 4 and tested on the spared chunk.\n# This is repeated 5 times and the average of the result is reported. \nscores = cross_val_score(rf, X, y, cv=5, scoring=\"neg_mean_absolute_percentage_error\")\nprint(f\"The random forest predicts the dust level with {scores.mean()+1} average accuracy\")","key":"tg3p7y99Jb"},{"type":"output","id":"8LyGIGqyuHc_7nP7ktG2o","data":[{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.608482036913111 average accuracy\n"}],"key":"SVaMg64p5t"}],"key":"P1gThQWzAz"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For evaluation, we are using a relative metric. The reported loss value is the relative difference (w.r.t to the true value) between the true and the predicted value. So, the ~60% accuracy we get here means our prediction deviates from the true value by 40% on average. Although this figure looks large at first glance, notice that the target value varies across a large range that makes orders of magnitude mistakes possible.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YkydjEwn9T"}],"key":"NAiCGh9JWG"}],"key":"xiQuI1d5nT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dust_df['PM10'].hist(bins=25);","key":"hCNpCM0txD"},{"type":"output","id":"6XeR1rdZowkLPG3gzr8RB","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"ca4491300b1b2e94fa42380288560a34","path":"/dust-cookbook/_preview/27/build/ca4491300b1b2e94fa42380288560a34.png"}}}],"key":"O9JSLJpLdg"}],"key":"sJuyMSTC6j"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This step is a typical part of the machine learning workflow for tuning hyper-parameters. Once we finalize the hyper-parameters, we can re-train the algorithm on all of our data (instead of 4/5 of it) and start exploring te importance of the features on our target variable.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"y32VbYr8wb"}],"key":"Jhr1HwvjgS"}],"key":"bzn3yFH3pJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Training a new random forest on our entire data\ny = dust_df['PM10'].values\nX = dust_df.drop(['PM10', 'wind_speed_10m'], axis=1).values\nfeatures = dust_df.drop(['PM10'], axis=1).columns\nrf = RandomForestRegressor(n_estimators=100, max_depth=100, n_jobs=-1)\nrf.fit(X, y);","key":"QaT4sDfvSE"},{"type":"output","id":"bL7mA8IzDqtldIFZ2Ls4w","data":[],"key":"mJrnTHxN78"}],"key":"gyNllLGaX3"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A very useful property of random forests is their interpretability. As useful as they are in practice, quite a lot of learning algorithms are hard to interpret once they are trained. Although there are exceptions, artificial neural networks are hard to make sense of despite their impressive performance, making them practical black-boxes. Random forests on the other hand, keep track of the importance of each feature and the ranges of each that dictate the target variable. We use this information to rank how our features impact the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"puKNrshQOr"},{"type":"inlineCode","value":"PM10","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KLiWczotoz"},{"type":"text","value":" dust levels.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dAviCKYFun"}],"key":"x0BOfyVyUx"}],"key":"cx7T3cUveI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(1,1, figsize=(22,14), sharex=False, sharey=False,\n                               constrained_layout=True)\nsorted_idx = rf.feature_importances_.argsort()\nimportances = rf.feature_importances_\n\n# Make a bar chart\ncols = np.array(['r','b','g','c','k','pink','purple','magenta','olive'])\nax.set_xlabel('Random Forest Feature Importance')\nax.set_ylabel('Features')\nax.set_axisbelow(True)\nax.grid()\nax.barh(features[sorted_idx],\n           importances[sorted_idx], color=cols);","key":"WWE74tTV2O"},{"type":"output","id":"E6q47UT48bsmMZl3wEq8Y","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 2200x1400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fd4b94d10048d1a9bf331c424fc22269","path":"/dust-cookbook/_preview/27/build/fd4b94d10048d1a9bf331c424fc22269.png"}}}],"key":"JTycryiMCL"}],"key":"s4FqWeTbHI"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We see in this figure the significant impact of the wind speed at 10 meters. However, this dominance overshadows the impact of the other featsures. To see how important each feature is, we use the accuracy of our predictor that has all the features as the baseline and re-train predictors by ;eaving one feature out at a time. Then, comparing the performance of these predictors with the benchmark can help us quantify how much our predictor’s performance changes by including each feature.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xaxX0Hv64Q"}],"key":"W6dTaYzHQO"}],"key":"LTTwKwZYKc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"benchmark_accuracy = scores.mean()\nleave_one_out_accuracies = []\n\n# We exclude the one-hot encoded features\nleave_one_out_features = ['T2', 'rh2', 'slp', 'PBLH', 'wind_speed_10m', 'wind_speed_925hPa','RAIN']\n\nfor feat in leave_one_out_features:\n    dropped_labels = ['PM10']\n    dropped_labels.append(feat)\n    features = dust_df.drop(dropped_labels, axis=1)\n    X = dust_df.drop(dropped_labels, axis=1).values\n    rf = RandomForestRegressor(n_estimators=100, max_depth=100, n_jobs=-1);\n    current_scores = cross_val_score(rf, X, y, cv=5, scoring=\"neg_mean_absolute_percentage_error\")\n    leave_one_out_accuracies.append(current_scores.mean())\n    print(f\"The random forest predicts the dust level with {current_scores.mean()+1} accuracy when we leave {dropped_labels[1]} out\")","key":"tft1kbtiK7"},{"type":"output","id":"zXKnCxjcGfbMeACEsrUAU","data":[{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.5878973897300686 accuracy when we leave T2 out\n"},{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.5768007067456583 accuracy when we leave rh2 out\n"},{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.631554060758191 accuracy when we leave slp out\n"},{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.5885768959731676 accuracy when we leave PBLH out\n"},{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.5211112769033364 accuracy when we leave wind_speed_10m out\n"},{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.5943753097078359 accuracy when we leave wind_speed_925hPa out\n"},{"output_type":"stream","name":"stdout","text":"The random forest predicts the dust level with 0.6122680503659922 accuracy when we leave RAIN out\n"}],"key":"oHEdrsCsPS"}],"key":"CfKaNn0rMy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(1,1, figsize=(22,14), sharex=False, sharey=False, constrained_layout=True);\nax.barh(leave_one_out_features, [benchmark_accuracy-loo for loo in leave_one_out_accuracies]);\nax.set_xlabel('Change in prediction accuracy when each feature is added to the dataset');\nax.set_ylabel('Features');","key":"Z5fwlo0PeD"},{"type":"output","id":"Nc9xxXpV-fnQDkEpoY2qs","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 2200x1400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"03a8a6b178ee39617b13eaa918e55a71","path":"/dust-cookbook/_preview/27/build/03a8a6b178ee39617b13eaa918e55a71.png"}}}],"key":"wzSDYiCVL0"}],"key":"nWzwamlWTD"}],"key":"ThziyUBBlb"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Self-organizing Maps (SOM)","url":"/notebooks/som","group":"Self Organizing Maps"}}},"domain":"http://localhost:3000"}